#!/bin/bash
shopt -s extglob

# $1 = <type> = pmath|amath|co|sasms|over9k|other
# $2 = <date> (format: YYYYMMDDhhmmhhmm)
#      - hhmmhhmm is start time + end time concatenated, in 24-hour format
# $3 = <filename>

DATE="$(date +%Y%m%d%H%M%S)"
DIR="BUILD-${DATE}"
PUG_EXEC="pug"
SASS_EXEC="sass --no-source-map"
HTML2PUG_EXEC="html2pug"
MARKDOWN_EXEC="perl Markdown.pl"

build() {
  if [[ -z $2 ]]; then
    echo WARNING: Root not provided, assuming current directory is root
  else
    cd $2
  fi
  echo "Copying files into build directory ${DIR}"
  mkdir ${DIR}
  cp -r $(ls | egrep -v "($(basename $1))|(BUILD)") ${DIR}
  echo "Compiling pug files"
  for srcfile in $(find ${DIR} -name '*.pug' | egrep -v 'footer|header'); do
    ${PUG_EXEC} ${srcfile}
    rm ${srcfile}
  done
  rm ${DIR}/{footer,header}.pug

  echo "Compiling scss files"
  for srcfile in $(find ${DIR} -name '*.scss'); do
    ${SASS_EXEC} ${srcfile} ${srcfile%scss}css
    rm ${srcfile}
  done
  echo "Creating symlink BUILD to latest build"
  if [[ -e BUILD ]]; then
    rm BUILD
  fi
  ln -s "${DIR}" "BUILD"
  echo 'Build complete!'
  echo "To make changes live, use the \`live' command."
}

clean() {
  dirs=$(ls | egrep BUILD)
  for dir in $(ls | egrep BUILD | tail -n +2 | head -n -1); do
    rm -r ${dir}
  done
  echo "Removed all old BUILD directories."
}

add-event() {
  # - Events page work
  # I hope this website isn't being used in Fall 2099
  YEAR=$(($(($4/10000))%100))
  MONTH=$(($(($4/100))%100))
  if [[ $MONTH -ge 1 && $MONTH -le 4 ]]; then
    PREV_ACADTERM=f$(($YEAR-1))
    ACADTERM=w
    NEXT_ACADTERM=s$YEAR
  elif [[ $MONTH -ge 5 && $MONTH -le 8 ]]; then
    PREV_ACADTERM=w$YEAR
    ACADTERM=s
    NEXT_ACADTERM=f$YEAR
  else
    PREV_ACADTERM=s$YEAR
    ACADTERM=f
    NEXT_ACADTERM=w$((YEAR+1))
  fi
  ACADTERM=${ACADTERM}$YEAR
  if [[ ! -e event.md ]]; then
    echo "FATAL: A long-form Markdown description named \`event.md' is expected at root"
    echo "Failed to create event."
    exit 1
  fi
  if [[ ! -e events/${ACADTERM} ]]; then
    mkdir events/${ACADTERM}
  fi
  cp event.md events/${ACADTERM}/$4.md
  if [[ ! -e events/${ACADTERM}/index.pug ]]; then
    cp template/event_index.pug events/${ACADTERM}/index.pug

    sed -i "1s/^/- const prevTerm = \"${PREV_ACADTERM}\";\n- const nextTerm = \"${NEXT_ACADTERM}\";\n/" events/${ACADTERM}/index.pug
    if [[ ${ACADTERM::-2} == 'f' ]]; then
      sed -i "1s/^/- const term = \"Fall 20${YEAR}\";\n/" events/${ACADTERM}/index.pug
    elif [[ ${ACADTERM::-2} == 'w' ]]; then
      sed -i "1s/^/- const term = \"Winter 20${YEAR}\";\n/" events/${ACADTERM}/index.pug
    else
      sed -i "1s/^/- const term = \"Spring 20${YEAR}\";\n/" events/${ACADTERM}/index.pug
    fi
  fi

  CONTENT=$(mktemp)
  echo "    +event(\"$1\", \"$2\", \"$3\", \"$4\", \"$5\", \"$6\", \"$7\")" > ${CONTENT}
  ${MARKDOWN_EXEC} events/${ACADTERM}/$4.md | ${HTML2PUG_EXEC} | tail -n +4 | sed -e 's/^/  /' >> ${CONTENT}
  sed -i "/\/\/EVENTGOESHERE/ r ${CONTENT}" events/${ACADTERM}/index.pug
  rm ${CONTENT}
 
  # - Home page work -
  # Remove oldest event
  gawk -i inplace '/\+event\(.*\)/{++count;}{if(!(count==3)) print; else count=0;}' index.pug
  # Insert new event
  sed -i "s/.eventContainer/.eventContainer\n      +event(\"$1\", \"$2\", \"$3\", \"$4\", \"$5\", \"$6\", \"$7\")/" index.pug

  # Update Events redirect
  sed -i "s/URL=.../URL=${ACADTERM}/" events/index.pug

  echo "New event added! Rebuild the site using the \`build' command."
}

enable-potw() {
  # Uncomment POTW in header.pug
  sed -i "s/\/\/POTW disabled/a\.navItem(href='\/potw') POTW/g" header.pug
  echo "POTW enabled! Rebuild the site using the \`build' command."
}
disable-potw() {
  # Comment POTW in header.pug
  sed -i "s/a\.navItem(href='\/potw') POTW/\/\/POTW disabled/g" header.pug
  echo "POTW disabled! Rebuild the site using the \`build' command."
}

add-potw() {
  echo "TODO: Implement POTW"
  exit 1
}

if [[ -z $1 ]]; then
  echo "Usage: $0 COMMAND [OPTION]..."
  echo 'Commands:'
  echo '- clean'
  echo '- build [root-dir]'
  echo '- add-event type title desc date begintime endtime loc'
  echo '  | ...where type = pmath|amath|co|sasms|over9k|other'
  echo '  | ...where date = YYYYMMDD'
  echo '  | ...where begintime, endtime = hhmm (24hr format)'
  echo '- add-potw title date desc'
  echo '  | ...where date = YYYYMMDD'
  echo '- enable-potw'
  echo '- disable-potw'
  exit 1
elif [[ $1 == 'build' ]]; then
  build $0
elif [[ $1 == 'clean' ]]; then
  clean $0
elif [[ $1 == 'add-event' ]]; then
  add-event "$2" "$3" "$4" "$5" "$6" "$7" "$8"
elif [[ $1 == 'add-potw' ]]; then
  add-potw $2 $3 $4
elif [[ $1 == 'enable-potw' ]]; then
  enable-potw
elif [[ $1 == 'disable-potw' ]]; then
  disable-potw
fi
exit 0
