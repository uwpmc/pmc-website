doctype html
include ../template/head.pug
meta(name="google-signin-client_id", content="407152582406-ad0u942n6550ctlh4852hm26qss44t4r.apps.googleusercontent.com")
script(src="https://apis.google.com/js/platform.js", async, defer)
link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/easymde/dist/easymde.min.css")
script(src="https://cdn.jsdelivr.net/npm/easymde/dist/easymde.min.js")
- var sections = ['update-signup', 'create-event', 'create-potw', 'course-list', 'update-execs', 'update-const', 'help'];
each val in sections
  style(type='text/css').
    a[id="#{val}"]:target ~ .textArea ##{val}-body {
      max-height: 999999px !important;
      opacity: 1 !important;
      transition: max-height 0.25s ease 0.25s, opacity 0.25s ease 0.25s;
    }
    a[id="#{val}"]:target ~ .textArea #frontmatter-body {
      max-height: 0 !important;
      opacity: 0 !important;
      transition: max-height 0.25s ease, opacity 0.25s ease;
    }
    a[id="#{val}"]:target ~ .textArea ##{val}-btn {
      color: #fff;
    }
    a[id="#{val}"]:target ~ .textArea ##{val}-btn .active {
      transform: skew(15deg, 0) translateX(-20%);
    }
-
  function resReason(res) {
    switch (res) {
      case 'signupupd':
        return ['Sign-up link successfully updated.', 'good'];
      case 'potwenabled':
        return ['POTW has been enabled.', 'good'];
      case 'potwdisabled':
        return ['POTW has been disabled.', 'good'];
      case 'eventsuccess':
        return ['Event successfully created.', 'good'];
      case 'potwsuccess':
        return ['POTW successfully created.', 'good'];
      case 'eventupdated':
        return ['Event successfully updated.', 'good'];
      case 'potwupdated':
        return ['POTW successfully updated.', 'good'];
      case 'eventdeleted':
        return ['Event successfully deleted.', 'good'];
      case 'potwdeleted':
        return ['POTW successfully deleted.', 'good'];
      case 'courseupd':
        return ['Course list successfully updated.', 'good'];
      case 'constupd':
        return ['Constitution successfully updated.', 'good'];
      case 'execupd':
        return ['Executive list successfully updated.', 'good'];
      case 'execfail':
        return ['You cannot remove yourself as an executive.', 'bad']
      case 'noselect':
        return ['Your selection must be non-empty.', 'bad'];
      case 'badfile':
        return ['Only PNG/JPG file types are allowed.', 'bad'];
      default:
        return ['what', 'bad'];
    }
  }
  function getCurTerm(month) {
    const quot = Math.floor(month/4)
    switch (quot) {
      case 0:
        return 'winter';
      case 1:
        return 'spring';
      case 2:
        return 'fall';
    }
  }
script.
  var selected;
  // Get rid of query string so page reloads aren't annoying
  const bruh = window.location.href.split('?');
  if (bruh.length > 1) {
    const hash = bruh[1].split('#');
    if (hash.length > 1) {
      bruh[0] += ('#' + hash[1])
    }
  }
  window.history.replaceState({}, '', bruh[0]);
  var cur = !{execs.length};

body
  each val in sections
    a(id=val)
  include ../template/header.pug
  .textArea
    .dashMenuContainer
      .dashMenu
        a.item#update-signup-btn(href='#update-signup') Sign-up Link
          .active
        a.item#create-event-btn(href='#create-event') Manage Events
          .active
        a.item#create-potw-btn(href='#create-potw') Manage POTW
          .active
        a.item#course-list-btn(href='#course-list') Course List
          .active
        a.item#update-const-btn(href='#update-const') Constitution
          .active
        a.item#update-execs-btn(href='#update-execs') Executives
          .active
        a.item#help-btn(href='#help') Help
          .active
        a.item#logout(href='/logout') Log out
          .active
    h1(style='margin: 0; padding: 3rem 0 0 0;') Admin Dashboard 
      span(style='font-size: 12pt; font-weight: 400; font-style: italic;') logged in as #{name}
    if typeof result !== 'undefined'
      - var reason = resReason(result);
      div(class='dashResult '+reason[1])
        p #{reason[0]}
    .dashSwapper
      .dashSwapItem#frontmatter-body
        p Select an option on the left to get started.
      .dashSwapItem#update-signup-body
        h2 Sign-up Link
        p Set the sign-up link here for the home page every term.
        form(action='/update_signup', method='POST')
          label(for='signup') Sign-up link:
          input(id='signup-link', type='text', name='signup', required='')
          script.
            fetch('/static/signuplink.txt').then(function(res) {
              if (res.status !== 200) {
                document.getElementById('signup-link').value = 'WARNING: The file signuplink.txt could not be found.';
                return;
              }
              res.text().then(function(data) {
                document.getElementById('signup-link').value = data;
              });
            });
          br
          button.button.good(type='submit') Update Sign-up Link
      .dashSwapItem#create-event-body
        h2 Manage Events
        details
          summary Event Search (for edits and deletion)
          form(id='edit_form')
            label(for='edit_term') Select term: 
            select(name='edit_term', id='edit_term', selected=getCurTerm(new Date().getUTCMonth()))
              option(value='winter') Winter
              option(value='spring') Spring
              option(value='fall') Fall
            input(id='edit_year', name='edit_year', type='number', min='1900', max='2099', step='1', value=(new Date().getUTCFullYear()))
          table(style='width: 100%;')
            colgroup
              col
              col(style='width: 6rem;')
              col(style='width: 6rem;')
            thead
              tr
                th(colspan='3') Search Results
            tbody#edit_results_box
          button(onclick='(function() {document.getElementById("eventform").reset(); easymde1.value(""); let theTable = document.querySelector("#edit_results_box"); for (let z = 0; z < theTable.children.length; ++z) { theTable.children[z].classList.remove("good"); }})()') Deselect
          script.
            const editSearchInput = document.querySelector('#edit_form');
            const editResultsBox = document.querySelector('#edit_results_box');
            editSearchInput.addEventListener('change' , (e) => {
              const j = editResultsBox.childElementCount;
              for (var i = 0; i < j; i++) {
                editResultsBox.removeChild(editResultsBox.firstChild);
              }
              //let search = e.target.value.trim();
              let term = document.querySelector('#edit_term').value;
              let year = document.querySelector('#edit_year').value;
              fetch('/query_events', {
                method: 'POST',
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({term, year})
                }).then(res =>
                  res.json()
                  ).then(data => {
                    if (data.length > 0) {
                      for (let i = 0; i < data.length; ++i) {
                        const row = '<tr><td>'+data[i].title+'</td><td style="width: 1%;"><button style="display: block; margin: auto;">Edit</button></td><td style="width: 1%;"><form action="/delete_event" method="POST" onsubmit="return confirm(\'Really delete event ' + data[i].id + ': ' + data[i].title + '?\')"><button type="submit", style="display: block; margin: auto;">Delete</button></td></tr>';
                        
                        editResultsBox.innerHTML += row;
                      }
                      // It is important that these are separate loops. Otherwise,
                      // setting the innerHTML erases the work we do here!
                      for (let i = 0; i < data.length; ++i) {
                        editResultsBox.children[i].children[1].children[0].onclick = function() {
                          selected = data[i].id;
                          for (let q = 0; q < data.length; ++q) {
                            document.getElementById('edit_results_box').children[q].classList.remove('good');
                          }
                          editResultsBox.children[i].classList.add('good');
                          document.getElementById('id').value = data[i].id;
                          document.getElementById('date').value = data[i].date.toString().slice(0,10);
                          document.getElementById('loc').value = data[i].loc;
                          document.getElementById('begin').value = data[i].begin;
                          document.getElementById('end').value = data[i].end;
                          document.getElementById('title').value = data[i].title;
                          document.getElementById('descr').value = data[i].descr;
                          easymde1.value(data[i].body);
                        }
                        editResultsBox.children[i].children[2].children[0].children[0].id = data[i].id;
                        editResultsBox.children[i].children[2].children[0].children[0].name = data[i].id;
                      }
                    }
                  }).catch(err => {
                    alert('error!');
                    console.error(err);
                  });
              });
              // Force an event to get initial results
              editSearchInput.dispatchEvent(new Event('change'));
        form#eventform(action='/new_event', enctype='multipart/form-data', method='POST')
          label(for='id') Internal ID (automatic): 
          input(type='text', id='id', name='id', readonly='', style='background-color: #ccc; cursor: default;')
          br
          br
          label(for='date') Date: 
          input(type='date', id='date', name='date', required='')
          br
          br
          label(for='loc') Location: 
          input(type='text', id='loc', name='loc', required='')
          br
          br
          label(for='begin') Begin time: 
          input(type='time', id='begin', name='begin', required='')
          br
          br
          label(for='end') End time: 
          input(type='time', id='end', name='end', required='')
          br
          br
          label(for='title') Title (max 255 chararacters): 
          input(type='text', id='title', name='title', required='')
          br
          br
          label(for='descr') Short description (max 255 characters, for preview):
          br
          textarea(name='descr', id='descr', required='')
          br
          br
          label(for='body') Long description (max 32768 characters, for event body):
          br
          textarea(name='body', id='body')
          script.
            var easymde1 = new EasyMDE({element: document.getElementById('body'), spellChecker: false});
          br
          button.button.good(type='submit') Publish Event
      .dashSwapItem#create-potw-body
        // POTW Creation
        h2 Manage POTW
        details
          summary POTW Search (for edits and deletion)
          table(style='width: 100%;')
            colgroup
              col
              col(style='width: 6rem;')
              col(style='width: 6rem;')
            thead
              tr
                th(colspan='3') Search Results
            tbody#edit_results_box-potw
              - var p = 0;
              while p < potws.length
                tr
                  td POTW #{p+1}: #{potws[p].title}
                  td(style='width: 1%;')
                    button(id=potws[p].id+'-potw', style='display: block; margin: auto;') Edit
                  td(style='width: 1%;')
                    form(action='/delete_potw', method='POST', onsubmit="return confirm('Really delete POTW " + potws[p].id + ": " + potws[p].title + "?')")
                      button(type='submit', id=potws[p].id, name=potws[p].id, style='display: block; margin: auto;') Delete
                - p++;
          button(onclick='(function() {document.getElementById("potwform").reset(); easymde2.value(""); let theTable = document.querySelector("#edit_results_box-potw"); for (let z = 0; z < theTable.children.length; ++z) { theTable.children[z].classList.remove("good"); }})()') Clear Selection
          script.
            const ugh = !{JSON.stringify(potws)};
            for (let l = 0; l < ugh.length; ++l) {
              document.getElementById(ugh[l].id+'-potw').onclick = function() {
                for (let q = 0; q < ugh.length; ++q) {
                  document.getElementById('edit_results_box-potw').children[q].classList.remove('good');
                }
                document.getElementById('edit_results_box-potw').children[l].classList.add('good');
                document.getElementById('potwid').value = ugh[l].id;
                document.getElementById('potwdate').value = ugh[l].date.toString().slice(0,10);
                document.getElementById('potwtitle').value = ugh[l].title;
                easymde2.value(ugh[l].body);
              }
            }
        form#potwform(action='/new_potw', enctype='multipart/form-data', method='POST')
          label(for='id') Internal ID (automatic): 
          input(type='text', id='potwid', name='id', readonly='', style='background-color: #ccc; cursor: default;')
          br
          br
          label(for='title') Title (max 255 chararacters): 
          input(type='text', id='potwtitle', name='title', required='')
          br
          br
          label(for='date') Due date: 
          input(type='date', id='potwdate', name='date', required='')
          br
          br
          label(for='image') Image (optional but encouraged, PNG/JPG only): 
          input(type='file', accept='.png, .jpg', id='potwimage', name='image')
          br
          br
          label(for='body') Problem, submission rules, prizes, etc. (max 32768 characters):
          br
          textarea(name='body', id='potwbody')
          script.
            var easymde2 = new EasyMDE({element: document.getElementById('potwbody'), spellChecker: false});
          br
          button.button.good(type='submit') Publish POTW
        h2 Enable/Disable POTW
        p(style='margin-bottom: 0;') If you aren't running Problem of the Week this term, you should disable POTW here so that old problems don't show up on the home page.
        form(action='/toggle_potw', method='POST', style='padding-top: 2rem;')
          label.switch
            input(type='checkbox', onchange='this.form.submit()', checked=isPOTW)
            span(class='slider')
      .dashSwapItem#course-list-body
        h2 Course Descriptions
        p Select and edit course descriptions below. Note that you can only edit one at once; only changes to the active course list will be saved.
        .coursesNav(style='margin: 0;')
          each val in courses
            .item
              button(id=val.shortSubject) #{val.longSubject}
        form(action='/update_courses', method='POST')
          input(type='hidden', name='subjectId', id='subjectId', value=(courses.length > 1 ? courses[0].id : null))
          textarea(name='courses', id='courses')
          script.
            var easymde4 = new EasyMDE({element: document.getElementById('courses'), spellChecker: false})
            const please = !{JSON.stringify(courses)};
            for (let i = 0; i < please.length; ++i) {
              document.getElementById(please[i].shortSubject).onclick = function() {
                easymde4.value(please[i].body);
                document.getElementById("subjectId").value = please[i].id;
              }
            }
            easymde4.value(please[0].body)
          button.button.good(type='submit') Update Course List
      .dashSwapItem#update-const-body
        h2 Constitution
        p You can edit the content of the constitution page here.
          br
          | Make sure a majority of exec votes is attained before changing this.
          | Remember to submit an updated pmc.const to the MathSoc VPI.
        form(action='/update_const', method='POST')
          textarea(name='constitution', id='constitution')
          script.
            var easymde3 = new EasyMDE({element: document.getElementById('constitution'), spellChecker: false})
            fetch('/static/pmc.const.md').then(function(res) {
              if (res.status !== 200) {
                easymde3.value('WARNING: The constitution file pmc.const.md could not be found.');
                return;
              }
              res.text().then(function(data) {
                easymde3.value(data);
              });
            })
          button.button.good(type='submit') Update Constitution
      .dashSwapItem#update-execs-body
        h2 Executives
        p Grant access to new executives or revoke privileges. This should usually be done at the start of term, after an election.
          br
          | Executives are admins and have access to this dashboard. Make sure to spell their Quest IDs correctly.
        form(action='update_execs', method='POST')
          table
            colgroup
              col
              col(style='width: 6rem')
            thead
              tr
                th(colspan='2') Current Executives
            tbody#edit_results_box-execs
              - var p = 0;
              while p < execs.length
                tr
                  td
                    input(type='text', value=execs[p].nameID, name="formexecs["+p+"]")
                  td(style='width: 1%;')
                    button(type='button', style='display: block; margin: auto;', onclick='this.closest("tbody").children.length > 1 ? this.closest("tr").remove() : false') Remove
                - p++;
          button(type='button', style='display: block;', onclick='((el) => {el.appendChild(el.children[0].cloneNode(true)).querySelector("input").value=""; el.children[el.children.length-1].querySelector("input").name="formexecs["+cur+"]"; ++cur;})(this.previousElementSibling.querySelector("tbody"))') Add User
          button.button.good(type='submit') Save Changes
      .dashSwapItem#help-body
        h2 Help
        h3 Markdown
        p The event/POTW/constitution editors in this dashboard all support Markdown, 
          | a simple language to control formatting (e.g. headers, boldface/italics, lists, etc). 
          | You can find a list of standard Markdown features and syntax 
          a(href='https://www.markdownguide.org/cheat-sheet/', target='_blank') here. 
          | Beware that the Markdown editor uses a different rendering engine than the rest 
          | of the website, so it won't preview everything correctly.
          br
          br
          strong List of Markdown features which this website supports rendering:
          br
          br
        ul
          li Headings (up to 3 levels)
          li Boldface, italics
          li Blockquotes (with nesting)
          li Ordered and unordered lists
          li Inline code, fenced code blocks
          li Horizontal rules
          li Hyperlinks (automatic and explicit)
          li Images
          li Tables
          li Strikethrough
          li Emoji shortcodes (e.g. 
            code :smile:
            | )
          li Task lists
          li 
            strong CUSTOM: 
            | Spoiler sections (e.g. for problem solutions, misc. dropdowns). See example:
            table
              thead
                tr
                  th Syntax
                  th Result
              tbody
                tr
                  td
                    pre
                      code
                        | :> Summary *(one line only)*
                        | Body content...
                        | **Anything** can go in here
                        | * Even lists with
                        | multi-line items!
                        | * Another list item!
                        | 
                        | ...and so on.
                        | <:
                  td#sample
                    details
                      summary Summary 
                        em (one line only)
                      p() Body content...
                        br
                        strong Anything 
                        | can go in here.
                      ul
                        li Even lists with
                          br
                          | multi-line items!
                        li And another list item!
                      p ...and so on.
        p
          strong IMPORTANT NOTE: 
          | The website also supports \(\LaTeX\) rendering via MathJax. However, since many 
          | characters can be interpreted as either Markdown or LaTeX syntax, 
          | you will need to escape special symbols (like backslashes, square 
          | brackets, any other special Markdown characters) with an additional 
          | backslash before the symbol. If you don't do this, then Markdown 
          | rendering will give you a bad time.
        h3 Event/POTW Management
        p Events and POTWs can be added/edited from this dashboard. The "internal ID" 
          | field isn't something you need to worry about; it's only used for 
          | editing events, and it's determined automatically when you click the 
          | "edit" button. 
          | If you're editing an existing event/POTW and don't want to update the 
          | cover image, just don't upload a new image and it won't change.
          br
          br
          | For POTWs, you may want to edit them after their deadlines to include 
          | solutions. If you do this, consider using the custom Markdown syntax 
          | for spoilers (described above).
        h3 Modifying This Website
        h4 Tech Stack
        p The PMC website runs on Node with the Express framework and uses Pug/Jade 
          | as a templating language in which all the pages are written. Events and
          | POTWs are stored as entries in a MySQL database, and are served by the
          | Node server upon request. The stylesheet is written in Sass, and is
          | pre-compiled (i.e., you must do so yourself).
        h4 Philosophy
        p While content is dynamically served by the Node server, all user-facing 
          | pages are static and run on pure HTML/CSS with no JavaScript necessary 
          | (except for MathJax, which is non-essential by all accounts). This was 
          | a deliberate design choice; if you are to modify this website, please 
          | try to minimise the use of JavaScript, and make sure that all pages
          | look presentable with JavaScript disabled.
        h4 Server access
        p The PMC website is currently hosted on the CSC Cloud as the virtual machine 
          code sacred-shoe
          | . If you need to access files, ask someone else with access to add your
          | SSH public key. Once this is done, you should be able to SSH into 
          code pmclub@172.19.134.46
          |  (you will need to connect to the UW Cisco VPN if you aren&rsquo;t on campus). 
          | A rough map of the website's structure is given below to help you find your way around:
        table#guide
          tbody
            tr
              td Node server file
              td
                code ~/www/index.js
            tr
              td Pug files
              td
                code ~/www/views/
            tr
              td Images
              td
                code ~/www/public/img/
            tr
              td Constitution
              td
                code ~/www/public/pmc.const.md
        h3 Anything Else
        p If you have questions, are running into issues or need 
          | help with anything, please reach out to Evan (that&rsquo;s me). 
          | I wrote this website as president in W22/S22, and I'm happy to help 
          | however possible. I can be reached at  
          a(href='mailto:egirardin@uwaterloo.ca') egirardin@uwaterloo.ca
          |  or 
          a(href='mailto:evangirardin@gmail.com') evangirardin@gmail.com
          | .
      div(style='min-height: 2rem;')
  include ../template/footer.pug
